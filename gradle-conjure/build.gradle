/*
 * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import net.ltgt.gradle.errorprone.CheckSeverity

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply from: "$rootDir/gradle/publish-jar.gradle"
apply plugin: 'com.gradle.plugin-publish'

dependencies {
    compile project(':gradle-conjure-api')
    compile 'com.google.guava:guava'
    compile 'com.palantir.sls.versions:sls-versions'
    compile 'com.fasterxml.jackson.core:jackson-databind'

    testCompile gradleTestKit()
    testCompile 'com.netflix.nebula:nebula-test'
    testCompile 'com.squareup.okhttp3:mockwebserver'
    testCompile 'org.assertj:assertj-core'
    testCompile 'org.mockito:mockito-core'
}

gradlePlugin {
    // NOTE: this MUST be true for `com.gradle.plugin-publish` to set up the pluginMaven publication.
    // If we set this to false, that code path will lead to introspecting dependencies off the configuration, and
    // break because they have no versions (they get recommended later by nebula).
    automatedPublishing = true
}

idea {
    module {
        testSourceDirs += file("src/test/groovy")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        check('Slf4jLogsafeArgs', CheckSeverity.OFF)
    }
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-conjure'
    vcsUrl = 'https://github.com/palantir/gradle-conjure'
    description = 'Gradle Conjure is a build tool which allows defining and generating code for Conjure APIs in Java projects.'
    tags = ['conjure', 'java', 'typescript', 'python']

    plugins {
        gradleConjurePlugin {
            id = 'com.palantir.conjure'
            displayName = 'Palantir Gradle Conjure'
        }
    }
}

tasks.publishPlugins {
    project.ext.'gradle.publish.key' = System.env.GRADLE_KEY
    project.ext.'gradle.publish.secret' = System.env.GRADLE_SECRET
    onlyIf { versionDetails().isCleanTag }
}

tasks.publish.dependsOn publishPlugins
